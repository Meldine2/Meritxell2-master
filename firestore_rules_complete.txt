rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // Ensure the user is authenticated and their 'users' document has role: 'admin'
      return request.auth != null &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // FIXED: Rules for 'users' collection - Allow reading for messaging
    match /users/{userId} {
      // Allow any authenticated user to read basic user info (for messaging)
      allow read: if request.auth != null;
      
      // Only allow users to create their own document
      allow create: if request.auth.uid == userId;
      
      // Only allow users to update their own document (with restrictions)
      allow update: if request.auth.uid == userId &&
                      (!("role" in request.resource.data) || request.resource.data.role == resource.data.role) &&
                      (!("email" in request.resource.data) || request.resource.data.email == resource.data.email);
                      
      // Only admins can delete user documents
      allow delete: if isAdmin();
    }

    // User's own adoption_progress document and its subcollections
    match /adoption_progress/{userId} {
      allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());

        match /step2_uploads/{submissionId} {
          allow read, create, list: if request.auth != null && (request.auth.uid == userId || isAdmin());
          allow delete: if isAdmin() || (request.auth != null && request.auth.uid == userId);
        }

        match /step3_uploads/{submissionId} {
          allow read, create, list: if request.auth != null && (request.auth.uid == userId || isAdmin());
          allow delete: if isAdmin() || (request.auth != null && request.auth.uid == userId);
        }
        match /step4_uploads/{submissionId} {
          allow read, create, list: if request.auth != null && (request.auth.uid == userId || isAdmin());
          allow delete: if isAdmin() || (request.auth != null && request.auth.uid == userId);
        }
        match /step5_uploads/{submissionId} {
          allow read, create, list: if request.auth != null && (request.auth.uid == userId || isAdmin());
          allow delete: if isAdmin() || (request.auth != null && request.auth.uid == userId);
        }
        match /step6_uploads/{submissionId} {
          allow read, create, list: if request.auth != null && (request.auth.uid == userId || isAdmin());
          allow delete: if isAdmin() || (request.auth != null && request.auth.uid == userId);
        }
        match /step7_uploads/{submissionId} {
          allow read, create, list: if request.auth != null && (request.auth.uid == userId || isAdmin());
          allow delete: if isAdmin() || (request.auth != null && request.auth.uid == userId);
        }
        match /step8_uploads/{submissionId} {
          allow read, create, list: if request.auth != null && (request.auth.uid == userId || isAdmin());
          allow delete: if isAdmin() || (request.auth != null && request.auth.uid == userId);
        }
        match /step9_uploads/{submissionId} {
          allow read, create, list: if request.auth != null && (request.auth.uid == userId || isAdmin());
          allow delete: if isAdmin() || (request.auth != null && request.auth.uid == userId);
        }
        match /step10_uploads/{submissionId} {
          allow read, create, list: if request.auth != null && (request.auth.uid == userId || isAdmin());
          allow delete: if isAdmin() || (request.auth != null && request.auth.uid == userId);
        }

        match /comments/{stepName} {
          allow read: if request.auth != null;
          allow write: if isAdmin();
        }
    }

    // User's own user_submissions_status documents and any subcollections/nested documents
    match /user_submissions_status/{userId}/{document=**} {
      allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }

    // Rules for 'children' collection
    match /children/{childId} {
      // ALLOW ALL READ, WRITE, CREATE, DELETE for any authenticated user
      // WARNING: This is highly permissive and grants full control over child data
      // to any logged-in user. Use with extreme caution.
      allow read, create, update, delete: if request.auth != null;
    }

    // Appointments collection
    match /appointments/{appointmentId} {
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null &&
        ( (request.auth.uid == resource.data.userId && request.resource.data.diff(resource.data).changedKeys().hasOnly(['status'])) || isAdmin() );
      allow delete: if request.auth != null &&
        (request.auth.uid == resource.data.userId || isAdmin());
    }

    // Rules for 'deletedAppointmentsLog'
    match /deletedAppointmentsLog/{logId} {
      allow create, update, delete: if false; // No direct writes from client
      allow read: if isAdmin(); // Only admins can read the log
    }

    // Donations collections (more open for now)
    match /FoodDonation/{donationId} { allow read, write: if request.auth != null; }
    match /ClothesDonation/{donationId} { allow read, write: if request.auth != null; }
    match /EducationDonation/{donationId} { allow read, write: if request.auth != null; }
    match /ToysDonation/{donationId} { allow read, write: if request.auth != null; }
    
    // MoneyDonation collection - ADDED TO FIX PERMISSION ERRORS
    match /MoneyDonation/{donationId} {
      allow read, write: if request.auth != null; // Anyone authenticated can read/write
    }

    // Donations collection for GCash payments (more open for now)
    match /donations/{document} {
      allow read, write: if request.auth != null;
    }

    // Combined and Corrected Rules for Matching Preferences
    match /matching_preferences/{documentId} {
      // Allow any authenticated user to create a new preference document.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.senderId;

      // Allow read access for owner (senderId) or admin.
      allow read: if request.auth != null && (request.auth.uid == resource.data.senderId || isAdmin());

      // Allow update access if:
      // 1. The user is the sender AND the existing status is 'pending' AND the new status is 'accepted', 'declined', or 'cancelled'.
      // OR
      // 2. The user is an admin (who can update any field for admin-side operations).
      allow update: if isAdmin() || (
                              request.auth != null &&
                              request.auth.uid == resource.data.senderId && // User is the sender
                              resource.data.status == 'pending' && // Current status must be 'pending' for user to accept/decline
                              request.resource.data.status in ['accepted', 'declined', 'cancelled'] && // New status must be valid user action
                              request.resource.data.senderId == resource.data.senderId && // Ensure senderId is not changed by user
                              request.resource.data.receiverId == resource.data.receiverId // Ensure receiverId is not changed by user
                            );

      // Admin can delete, or the sender can delete (regardless of status).
      allow delete: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.senderId);
    }

    // Additional matching preferences rule for broader access
    match /matching_preferences/{document=**} {
      allow read, write: if request.auth != null;
    }

    // NEW RULES FOR DONATION COLLECTIONS - ANYONE (AUTHENTICATED) CAN READ/WRITE
    // Specific donation types (text-based)
    match /clothesdonation/{donationId} {
      allow read, write: if request.auth != null; // Anyone authenticated can read/write
    }
    match /educationdonation/{donationId} {
      allow read, write: if request.auth != null; // Anyone authenticated can read/write
    }
    match /toysdonation/{donationId} {
      allow read, write: if request.auth != null; // Anyone authenticated can read/write
    }
    match /fooddonation/{donationId} {
      allow read, write: if request.auth != null; // Anyone authenticated can read/write
    }

    // Main donations collection (Money Sponsorship, Education Sponsorship, Medicine Sponsorship)
    match /donations/{donationId} {
      allow read, write: if request.auth != null; // Anyone authenticated can read/write
    }

    // HISTORY COLLECTIONS - ADDED TO FIX PERMISSION ERRORS
    // Users can read their own data, admins can read all
    match /adoption_history/{document=**} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         isAdmin());
      allow write: if isAdmin(); // Only admins can write to history
    }

    match /donation_history/{document=**} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         isAdmin());
      allow write: if isAdmin(); // Only admins can write to history
    }

    match /matching_history/{document=**} {
      allow read: if request.auth != null && 
        (resource.data.userID == request.auth.uid || 
         resource.data.userId == request.auth.uid ||
         isAdmin());
      allow write: if isAdmin(); // Only admins can write to history
    }

    match /appointment_history/{document=**} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         isAdmin());
      allow write: if isAdmin(); // Only admins can write to history
    }

    // Notification logs (for debugging)
    match /notification_logs/{document=**} {
      allow read, write: if request.auth != null;
    }

    // Default catch-all - deny everything else by default
    match /{document=**} { allow read, write: if false; }
  }
} 